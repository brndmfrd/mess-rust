use std::fs::File;
//use std::io::prelude::*;
//use rand::prelude::*;
use rand::Rng;


/*
fn main() -> std::io::Result<()> {
    let mut randy = thread_rng();
    Ok(())
}
*/


/* I demand a list of random numbers! */
//fn create_number_list() -> Vec<u32> {
fn create_number_list() -> Vec<u32> {
    let mut vec = Vec::new();
    let mut randy = rand::thread_rng();

    for _i in 1..6 {
        //vec.push(_i);  
        vec.push( randy.gen_range(0,10) );
        //let n: u32 = randy.gen_range(0,11);
        //vec.push(n);  
    }

    /*
    for i in 0..vec.len(){
        println!("{}", vec[i]);
    }
    */

    /*
    while let Some(top) = vec.pop(){
        println!("{}", top);
    }
    */

    //let vec1 = vec![1,2,3,4,5];
    //assert_eq!(vec, vec1);

    return vec;
    //Ok(vec)
    //return vec;
}


fn main() -> std::io::Result<()> {
    let int_vec = create_number_list();

    /*
    while let Some(top) = intVec.pop(){
        println!("{}", top);
    }
    */

    let mut _file = File::create("foo.txt")?;

    //let intVec = vec![1,2,3,4];

    let mystring: String = int_vec
        .into_iter()
        .map(|d| std::char::from_digit(d, 10).unwrap())
        .collect();
    //let mystring : String = intVec.into_iter().collect();

    println!("{}", mystring);
    //writeln!(mystring);
    //file.write_all(b"Hello, world!")?;
    Ok(())
}


/*
 * fn main() {
    // (all the type annotations are superfluous)
    // A reference to a string allocated in read only memory
    let pangram: &'static str = "the quick brown fox jumps over the lazy dog";
    println!("Pangram: {}", pangram);

    // Iterate over words in reverse, no new string is allocated
    println!("Words in reverse");
    for word in pangram.split_whitespace().rev() {
        println!("> {}", word);
    }

    // Copy chars into a vector, sort and remove duplicates
    let mut chars: Vec<char> = pangram.chars().collect();
    chars.sort();
    chars.dedup();

    // Create an empty and growable `String`
    let mut string = String::new();
    for c in chars {
        // Insert a char at the end of string
        string.push(c);
        // Insert a string at the end of string
        string.push_str(", ");
    }

    // The trimmed string is a slice to the original string, hence no new
    // allocation is performed
    let chars_to_trim: &[char] = &[' ', ','];
    let trimmed_str: &str = string.trim_matches(chars_to_trim);
    println!("Used characters: {}", trimmed_str);

    // Heap allocate a string
    let alice = String::from("I like dogs");
    // Allocate new memory and store the modified string there
    let bob: String = alice.replace("dog", "cat");

    println!("Alice says: {}", alice);
    println!("Bob says: {}", bob);
}
*/












